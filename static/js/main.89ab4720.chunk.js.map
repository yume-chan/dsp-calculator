{"version":3,"sources":["data/recipes.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Items","recipes","yields","ingredients","item","quantity","getRecipeContent","setItem","setQuantity","recipe","map","ingredient","nestedContent","href","onClick","App","React","useState","dropdownItems","Dropdown","Item","eventKey","recipeContent","displayContent","Number","isNaN","className","id","type","placeholder","value","onChange","event","parseInt","target","DropdownButton","title","onSelect","arg","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAkBaA,G,MAAQ,CACjB,gBACA,WACA,eACA,aACA,YACA,iBACA,0BACA,OACA,WACA,WACA,sBACA,iCACA,aACA,WACA,oBACA,SACA,gBACA,6BACA,qBACA,YACA,cACA,cACA,QACA,YACA,gBACA,iBACA,iBACA,eACA,UAGSC,EAAmB,CAC5B,gBAAiB,CACbC,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,aACNC,SAAU,GAEd,CACID,KAAM,eACNC,SAAU,KAItB,eAAgB,CACZH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,aACNC,SAAU,KAItB,iBAAkB,CACdH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,aACNC,SAAU,GAEd,CACID,KAAM,OACNC,SAAU,GAEd,CACID,KAAM,gBACNC,SAAU,KAItB,0BAA2B,CACvBH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,iBACNC,SAAU,GAEd,CACID,KAAM,gBACNC,SAAU,KAItB,KAAQ,CACJH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,aACNC,SAAU,KAItB,SAAY,CACRH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,WACNC,SAAU,GAEd,CACID,KAAM,gBACNC,SAAU,KAItB,SAAY,CACRH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,WACNC,SAAU,KAItB,aAAc,CACVH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,WACNC,SAAU,KAItB,sBAAuB,CACnBH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,cACNC,SAAU,KAItB,iCAAkC,CAC9BH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,oBACNC,SAAU,GAEd,CACID,KAAM,iBACNC,SAAU,IAEd,CACID,KAAM,qBACNC,SAAU,MAItB,oBAAqB,CACjBH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,QACNC,SAAU,IAEd,CACID,KAAM,iBACNC,SAAU,IAEd,CACID,KAAM,YACNC,SAAU,IAEd,CACID,KAAM,qBACNC,SAAU,MAItB,OAAU,CACNH,OAAQ,EACRC,YAAa,CACT,CACIC,KAAM,WACNC,SAAU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","file":"static/js/main.89ab4720.chunk.js","sourcesContent":["\nexport type Item = typeof Items[number];\n\nexport interface Ingredient {\n    item: Item;\n    quantity: number;\n}\n\nexport interface Recipe {\n    yields: number;\n    ingredients?: Ingredient[];\n    alternate?: Ingredient[];\n}\n\nexport interface Recipes {\n    [Item: string]: Recipe | undefined;\n}\n\nexport const Items = [\n    \"Circuit board\",\n    \"Coal ore\",\n    \"Copper ingot\",\n    \"Copper ore\",\n    \"Crude oil\",\n    \"Electric motor\",\n    \"Electromagnetic turbine\",\n    \"Gear\",\n    \"Graphene\",\n    \"Graphite\",\n    \"High-purity silicon\",\n    \"Interstellar logistics station\",\n    \"Iron ingot\",\n    \"Iron ore\",\n    \"Logistics station\",\n    \"Magnet\",\n    \"Magnetic coil\",\n    \"Microcrystalline component\",\n    \"Particle container\",\n    \"Processor\",\n    \"Refined oil\",\n    \"Silicon ore\",\n    \"Steel\",\n    \"Stone ore\",\n    \"Sulfuric acid\",\n    \"Titanium alloy\",\n    \"Titanium ingot\",\n    \"Titanium ore\",\n    \"Water\"\n] as const;\n\nexport const recipes: Recipes = {\n    \"Circuit board\": {\n        yields: 2,\n        ingredients: [\n            {\n                item: \"Iron ingot\",\n                quantity: 2\n            },\n            {\n                item: \"Copper ingot\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Copper ingot\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Copper ore\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Electric motor\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Iron ingot\",\n                quantity: 2\n            },\n            {\n                item: \"Gear\",\n                quantity: 1\n            },\n            {\n                item: \"Magnetic coil\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Electromagnetic turbine\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Electric motor\",\n                quantity: 2\n            },\n            {\n                item: \"Magnetic coil\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Gear\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Iron ingot\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Graphene\": {\n        yields: 2,\n        ingredients: [\n            {\n                item: \"Graphite\",\n                quantity: 3\n            },\n            {\n                item: \"Sulfuric acid\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Graphite\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Coal ore\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Iron ingot\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Iron ore\",\n                quantity: 1\n            },\n        ]\n    },\n    \"High-purity silicon\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Silicon ore\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Interstellar logistics station\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Logistics station\",\n                quantity: 1\n            },\n            {\n                item: \"Titanium alloy\",\n                quantity: 50\n            },\n            {\n                item: \"Particle container\",\n                quantity: 20\n            },\n        ]\n    },\n    \"Logistics station\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Steel\",\n                quantity: 50\n            },\n            {\n                item: \"Titanium ingot\",\n                quantity: 50\n            },\n            {\n                item: \"Processor\",\n                quantity: 50\n            },\n            {\n                item: \"Particle container\",\n                quantity: 20\n            },\n        ]\n    },\n    \"Magnet\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Iron ore\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Magnetic coil\": {\n        yields: 2,\n        ingredients: [\n            {\n                item: \"Magnet\",\n                quantity: 2\n            },\n            {\n                item: \"Copper ingot\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Microcrystalline component\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"High-purity silicon\",\n                quantity: 2\n            },\n            {\n                item: \"Copper ingot\",\n                quantity: 1\n            },\n        ]\n    },\n    \"Particle container\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Electromagnetic turbine\",\n                quantity: 2\n            },\n            {\n                item: \"Copper ingot\",\n                quantity: 2\n            },\n            {\n                item: \"Graphene\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Processor\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Circuit board\",\n                quantity: 2\n            },\n            {\n                item: \"Microcrystalline component\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Refined oil\": {\n        yields: 2,\n        ingredients: [\n            {\n                item: \"Crude oil\",\n                quantity: 2\n            },\n        ]\n    },\n    \"Steel\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Iron ingot\",\n                quantity: 3\n            },\n        ]\n    },\n    \"Sulfuric acid\": {\n        yields: 4,\n        ingredients: [\n            {\n                item: \"Refined oil\",\n                quantity: 6\n            },\n            {\n                item: \"Stone ore\",\n                quantity: 8\n            },\n            {\n                item: \"Water\",\n                quantity: 4\n            },\n        ]\n    },\n    \"Titanium alloy\": {\n        yields: 4,\n        ingredients: [\n            {\n                item: \"Titanium ingot\",\n                quantity: 4\n            },\n            {\n                item: \"Steel\",\n                quantity: 4\n            },\n            {\n                item: \"Sulfuric acid\",\n                quantity: 8\n            },\n        ]\n    },\n    \"Titanium ingot\": {\n        yields: 1,\n        ingredients: [\n            {\n                item: \"Titanium ore\",\n                quantity: 2\n            },\n        ]\n    },\n}\n\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Item, Items, recipes } from './data/recipes';\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\n\nimport './App.css';\n\nfunction App() {\n  const [ item, setItem ] = React.useState<Item>(\"Interstellar logistics station\");\n  const [ quantity, setQuantity ] = React.useState<number>(1);\n\n  const dropdownItems = Items.map(item => \n    <Dropdown.Item eventKey={item}>\n      {item}\n    </Dropdown.Item>\n  );\n\n  const onDropdown = (arg: any) => {\n    setItem(arg);\n    setQuantity(1);\n  };\n\n  const recipeContent = getRecipeContent(item, quantity, setItem, setQuantity);\n  const displayContent = Number.isNaN(quantity) ? \"Invalid quantity\" : recipeContent;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"basic-addon\">\n              Quantity\n            </span>\n          </div>\n          <input \n            type=\"number\" \n            className=\"form-control\" \n            placeholder=\"Quantity\" \n            value={quantity} \n            onChange={(event)=> setQuantity(Number.parseInt(event.target.value))}\n          />\n        </div>\n        <br/>\n        <DropdownButton \n          id=\"dropdown-basic-button\" \n          title={item}\n          onSelect={onDropdown}\n        >\n          {dropdownItems}\n        </DropdownButton>\n        <br/>\n        {displayContent}\n      </header>\n    </div>\n  );\n}\n\nfunction getRecipeContent(\n  item: Item, \n  quantity: number, \n  setItem: (item: Item) => void, \n  setQuantity: (quantity: number) => void) \n{\n  const recipe = recipes[item];\n  const recipeContent = recipe?.ingredients?.map(ingredient => {\n    const nestedRecipe = getRecipeContent(ingredient.item, quantity * ingredient.quantity, setItem, setQuantity);\n    // const nestedContent = nestedRecipe ? nestedRecipe : <ul><li>No Recipe</li></ul>;\n    const nestedContent = nestedRecipe;\n    const onClick = () => {\n      setItem(ingredient.item);\n      setQuantity(quantity * ingredient.quantity);\n    }\n\n    return (\n      <ul>\n        <li>\n          {/* eslint-disable-next-line */}\n          <a href=\"#\" onClick={onClick}>\n            {ingredient.item}: {(quantity * ingredient.quantity) / recipe.yields}\n          </a>\n          {nestedContent}\n        </li>\n      </ul>\n    )\n  });\n\n  return recipeContent;\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}